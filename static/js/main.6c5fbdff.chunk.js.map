{"version":3,"sources":["components/Circles/Circles.jsx","components/CircleSelector/CircleSelector.jsx","App.js","serviceWorker.js","index.js"],"names":["Circles","props","className","value","name","selected","CircleSelector","buttonClick","e","onClick","target","App","state","changeSelection","newSelection","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UA2BeA,G,MAxBC,SAAUC,GACtB,OACI,yBAAKC,UAAU,WACX,yBACIC,MAAM,IAAIC,KAAK,IACfF,UAA8B,MAAnBD,EAAMI,SAAmB,WAAa,QAFrD,KAKA,yBACIF,MAAM,IAAIC,KAAK,IACfF,UAA8B,MAAnBD,EAAMI,SAAmB,WAAa,QAFrD,KAIA,yBACIF,MAAM,IAAIC,KAAK,IACfF,UAA8B,MAAnBD,EAAMI,SAAmB,WAAa,QAFrD,KAIA,yBACIF,MAAM,IAAIC,KAAK,IACfF,UAA8B,MAAnBD,EAAMI,SAAmB,WAAa,QAFrD,QCyCGC,G,MAzCQ,SAACL,GAEpB,IAAMM,EAAc,SAACC,GACjBP,EAAMQ,QAAQD,EAAEE,OAAOP,QAK3B,GAAIF,EAAMI,SAEN,OACI,yBAAKH,UAAU,kBACX,4BACIC,MAAM,IACND,UAA8B,MAAnBD,EAAMI,SAAmB,WAAa,OACjDI,QAASF,IACW,IAAnBN,EAAMI,SAAoB,oBAAsB,mBAErD,4BACIF,MAAM,IAEND,UAA8B,MAAnBD,EAAMI,SAAmB,WAAa,OACjDI,QAASF,IACW,IAAnBN,EAAMI,SAAoB,oBAAsB,mBAErD,4BACIF,MAAM,IACND,UAA8B,MAAnBD,EAAMI,SAAmB,WAAa,OACjDI,QAASF,IACW,IAAnBN,EAAMI,SAAoB,oBAAsB,mBAErD,4BACIF,MAAM,IACND,UAA8B,MAAnBD,EAAMI,SAAmB,WAAa,OACjDI,QAASF,IACW,IAAnBN,EAAMI,SAAoB,oBAAsB,sBCWtDM,G,iNAzDbC,MAAQ,CACNP,SAAU,K,EAIZQ,gBAAkB,SAACC,GACjB,EAAKC,SAAS,CACZV,SAAUS,K,wEAcZ,OACE,yBAAKZ,UAAU,OAEb,kBAAC,EAAD,CACEG,SAAUW,KAAKJ,MAAMP,SACrBI,QAASO,KAAKH,kBAChB,kBAAC,EAAD,CACER,SAAUW,KAAKJ,MAAMP,WANzB,U,GAvBYY,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6c5fbdff.chunk.js","sourcesContent":["import React from 'react';\nimport './Circles.css'\n\nconst Circles = function (props) {\n    return (\n        <div className='Circles'>\n            <div\n                value='1' name='1'\n                className={props.selected === '1' ? 'selected' : 'null'}\n\n            >1</div>\n            <div\n                value='2' name='2'\n                className={props.selected === '2' ? 'selected' : 'null'}\n            >2</div>\n            <div\n                value='3' name='3'\n                className={props.selected === '3' ? 'selected' : 'null'}\n            >3</div>\n            <div\n                value='4' name='4'\n                className={props.selected === '4' ? 'selected' : 'null'}\n            >4</div>\n        </div>\n    )\n}\n\nexport default Circles","import React from 'react';\nimport './CircleSelector.css'\n\n\n// ISSUE WITH setState({})\n\n\n// onClick sets off buttonClick function\n// const buttonClick = (e) => {\n//     this.setState({\n//         selected: this.state.selected\n//     })\n// }\n\n\n// May have to move buttonClick function to App.js \n// If so, add helper function to redirect onClick to buttonClick on App.js\n\n\nconst CircleSelector = (props) => {\n\n    const buttonClick = (e) => {\n        props.onClick(e.target.value)\n        // this.setState({\n        //     [e.target.name]: e.target.value\n    }\n\n    if (props.selected)\n\n        return (\n            <div className=\"CircleSelector\">\n                <button\n                    value='1'\n                    className={props.selected === '1' ? 'selected' : 'null'}\n                    onClick={buttonClick}>\n                    {props.selected === true ? 'CIRCLE 1 SELECTED' : 'SELECT CIRCLE 1'}\n                </button>\n                <button\n                    value='2'\n                    // name='2'\n                    className={props.selected === '2' ? 'selected' : 'null'}\n                    onClick={buttonClick}>\n                    {props.selected === true ? 'CIRCLE 2 SELECTED' : 'SELECT CIRCLE 2'}\n                </button>\n                <button\n                    value='3'\n                    className={props.selected === '3' ? 'selected' : 'null'}\n                    onClick={buttonClick}>\n                    {props.selected === true ? 'CIRCLE 3 SELECTED' : 'SELECT CIRCLE 3'}\n                </button>\n                <button\n                    value='4'\n                    className={props.selected === '4' ? 'selected' : 'null'}\n                    onClick={buttonClick}>\n                    {props.selected === true ? 'CIRCLE 4 SELECTED' : 'SELECT CIRCLE 4'}\n                </button>\n            </div >\n        )\n}\n\nexport default CircleSelector","import React, { Component } from 'react';\nimport Circles from './components/Circles/Circles';\nimport CircleSelector from './components/CircleSelector/CircleSelector';\nimport './App.css';\n\n\n\nclass App extends Component {\n  state = {\n    selected: '1',\n  }\n\n\n  changeSelection = (newSelection) => {\n    this.setState({\n      selected: newSelection\n    })\n\n  }\n\n\n\n  // handleShowForm = event => {\n  //   this.setState({\n  //     isShowing: !this.state.isShowing\n  //   })\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <CircleSelector\n          selected={this.state.selected}\n          onClick={this.changeSelection} />\n        <Circles\n          selected={this.state.selected} />\n        />\n\n      </div>\n    )\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}